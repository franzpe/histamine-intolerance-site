DB STRUCTURE:
  ☐ user
    ☐ id (int) - PK
    ☐ userName (varchar)
    ☐ password (varchar)
    ☐ firstName (varchar)
    ☐ lastName (varchar)
    ☐ contactEmail (varchar)
    ☐ role (varchar) - FK (roles)

  ☐ roles
    ☐ id (char)
    ☐ name (varchar)

  // Useri mozu mat viacero jedal vo svojom profile
  ☐ userFoods
    ☐ userId (int) - PK FK
    ☐ foodId (int) - PK FK 

  ☐ food
    ☐ id (int) - PK
    ☐ nazov (varchar)
    ☐ histamine level (int)
    ☐ rating (float)
    ☐ description (varchar)

  ☐ histamineLevel
    ☐ value
    ☐ name
    ☐ description
    
  ☐ recipe
    ☐ id (int)
    ☐ name (varchar)
    ☐ creator (int) - FK (user)
    ☐ image (???)
    ☐ procedure (varchar)
    ☐ rating (float(4,2))

  ☐ recipeFoods
    ☐ recipe - PK FK
    ☐ food - PK 
    ☐ quantity
    ☐ unit
  
  ☐ unit

  
// --- Featuers --- //
☐ User ma zoznam svojich potravin ktore hodnotil
☐ Kazda potravina ma rating
☐ recept sa sklada z potravin kde bude ukazana aj ich znasanlivost
  ☐ recept ma rating
  ☐ pre recept bude vypocitana pravdepodobnost, ze to userovi bude pasovat
☐ role aspon User, admin

notes:
  ENGINE=InnoDB pouzivat v Mysql
  example:
    CREATE TABLE NameSubject (
      Autonumber INT NOT NULL AUTO_INCREMENT,
      NameorSubject nvarchar(255),
      PRIMARY KEY (Autonumber)
    ) ENGINE=InnoDB;

    export const RecipeType = new GraphQLObjectType({
      name: 'Recipe',
      fields: () => ({
        id: { type: GraphQLInt },
        name: { type: GraphQLString },
        creator: {
          type: UserType,
          resolve(parent) {
            return userController.getOne(parent.creatorId);
          }
        },
        process: { type: GraphQLString },
        rating: { type: GraphQLFloat },
        foods: {
          type: new GraphQLList(
            new GraphQLObjectType({
              name: 'ExtendedFods',
              fields: () => ({
                ...FoodType.getFields(),
                quantity: { type: GraphQLFloat },
                unit: { type: UnitType }
              })
            })
          ),
          resolve(parent) {
            return recipeController.getRecipeFoods(parent.id);
          }
        }
      })
    });