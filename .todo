DB STRUCTURE:
  ☐ user
    ☐ id (int) - PK
    ☐ userName (varchar)
    ☐ password (varchar)
    ☐ firstName (varchar)
    ☐ lastName (varchar)
    ☐ contactEmail (varchar)
    ☐ role (varchar) - FK (roles)

  ☐ roles
    ☐ id (char)
    ☐ name (varchar)

  // Useri mozu mat viacero jedal vo svojom profile
  ☐ userFoods
    ☐ userId (int) - PK FK
    ☐ foodId (int) - PK FK 

  ☐ food
    ☐ id (int) - PK
    ☐ nazov (varchar)
    ☐ histamine level (int)
    ☐ rating (float)
    ☐ description (varchar)

  ☐ histamineLevel
    ☐ value
    ☐ name
    ☐ description
    
  ☐ recipe
    ☐ id (int)
    ☐ name (varchar)
    ☐ creator (int) - FK (user)
    ☐ image (???)
    ☐ procedure (varchar)
    ☐ rating (float(4,2))

  ☐ recipeFoods
    ☐ recipe - PK FK
    ☐ food - PK 
    ☐ quantity
    ☐ unit  

TASKS:
  ✔ scaffold db structrue create models @done(18-12-08 11:13)
  ✔ scaffold graphql schemas @done(18-12-08 11:13)
  ✔ validations @done(18-12-08 12:58)
  ☐ consider data loader implementation on server
  ☐ Change all db tables to InnoDB engine see example down
  ☐ Sticky footer 
  ☐ client store 
    ☐ authentication bool
  ☐ Trend - text-overflow: elipsess
  ☐ Mobile view in recipes adjust
  ☐ rating styling
    ☐ 0-49 secondary color
    ☐ 49.01 - 50.99 yellow 700
    ☐ 51 - 100 - grenn[500 -> more percentage]
  
FEATURE:
  ☐ User ma zoznam svojich potravin ktore hodnotil
  ☐ Kazda potravina ma rating
  ☐ recept sa sklada z potravin kde bude ukazana aj ich znasanlivost
    ☐ recept ma rating
    ☐ pre recept bude vypocitana pravdepodobnost, ze to userovi bude pasovat
  ☐ role aspon User, admin


notes:
  GRAPHQL GENERATOR:
    https://github.com/dotansimha/graphql-code-generator

  ENGINE=InnoDB pouzivat v Mysql
  example:
    CREATE TABLE NameSubject (
      Autonumber INT NOT NULL AUTO_INCREMENT,
      NameorSubject nvarchar(255),
      PRIMARY KEY (Autonumber)
    ) ENGINE=InnoDB;

data loader :
  https://github.com/gajus/gajus.com-blog/blob/master/posts/using-dataloader-to-batch-requests/index.md

example:
  import React, { Component } from 'react';
  import { graphql, compose } from 'react-apollo';
  import gql from 'graphql-tag';
  
  const query = gql`
    {
      foods {
        name
        rating
        description
      }
    }
  `;
  
  const mutation = gql`
    mutation login($userName: String!, $password: String!) {
      login(userName: $userName, password: $password)
    }
  `;
  
  const locState = gql`
    {
      userName @client
      password @client
    }
  `;
  
  const updateUser = gql`
    mutation updateUser($input: Object!) {
      updateUser(input: $input) @client
    }
  `;
  
  class App extends Component {
    constructor(props) {
      super(props);
  
      this.state = {
        jwt: ''
      };
    }
  
    handleChange = e => {
      const { name, value } = e.target;
      this.props.updateUser({ variables: { input: { [name]: value } } });
    };
  
    handleClick = e => {
      e.preventDefault();
      const { userName, password } = this.props.local;
      this.props
        .login({
          variables: { userName, password }
        })
        .then(res => {
          this.setState({ jwt: res.data.login });
        })
        .catch(err => {
          console.log(err.graphQLErrors[0].message);
        });
    };
  
    delay = ms => new Promise(_ => setTimeout(_, ms));
  
    renderFoods() {
      const { loading, foods, networkStatus } = this.props.remote;
  
      let element;
      if (loading) {
        element = <div>...loading</div>;
      } else if (networkStatus === 4) {
        element = <div>... refetching</div>;
      } else {
        element = foods.map((food, index) => <div key={index}>{food.name}</div>);
      }
  
      return element;
    }
  
    render() {
      const { refetch } = this.props.remote;
      const { userName, password } = this.props.local;
      return (
        <React.Fragment>
          <input
            name="userName"
            placeholder="userName"
            value={userName}
            onChange={this.handleChange}
          />
          <input
            name="password"
            placeholder="password"
            value={password}
            onChange={this.handleChange}
          />
          <button name="login" onClick={this.handleClick}>
            Login
          </button>
          {this.renderFoods()}
          <br />
          <div>Histamine intolerance app</div>
          <button onClick={() => refetch()}>refetch</button>
          <div>jwt: {this.state.jwt}</div>
        </React.Fragment>
      );
    }
  }
  
  export default compose(
    graphql(locState, { name: 'local' }),
    graphql(query, {
      name: 'remote'
    }),
    graphql(mutation, { name: 'login' }),
    graphql(updateUser, { name: 'updateUser' })
  )(App);
  

  const resolvers = {
  Mutation: {
    updateUser: (_, { input }, { cache, getCacheKey }, info) => {
      cache.writeData({ data: { ...input } });
      console.log(
        client.query({
          query: gql`
            {
              userName @client
            }
          `
        })
      );
      return null;
    }
  }
};